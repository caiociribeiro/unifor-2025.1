# criar uma tabela so com frequencia simples e relativa
tabela = table(data$`Raça da Vítima`)
tabela = as.data.frame(tabela)
data.fram
data.fram
attach(data)
library(readxl)
Base2025_1 <- read_excel("Base2025.1.xlsx")
View(Base2025_1)
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
# Frequência simples e relativa para "Natureza"
freq_natureza <- table(`Natureza`)
rel_natureza  <- prop.table(freq_natureza)
View(Base2025_1)
View(Base2025_1)
View(Base2025_1)
View(Base2025_1)
library(readxl)
data <- read_excel("data.xlsx")
View(data)
m
m
data.frame(data)
attach(data)
# Frequência simples e relativa para "Natureza"
freq_natureza <- table(`Natureza`)
rel_natureza  <- prop.table(freq_natureza)
print(freq_natureza)
print(rel_natureza)
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
library(xtable)
library(xtable)
# Função para gerar tabela em LaTeX para uma variável
geraTabelaLatex <- function(variavel, nome_variavel) {
# Cria a tabela de frequência simples
freq <- table(variavel)
# Calcula as frequências relativas (em porcentagem)
rel <- round(prop.table(freq) * 100, 2)
# Cria um data frame com as categorias, frequências e frequências relativas
df <- data.frame(
Categoria = names(freq),
Frequencia = as.numeric(freq),
Frequencia_Relativa = as.numeric(rel)
)
# Gera e imprime o código LaTeX para a tabela
print(xtable(df, caption = paste("Frequências para", nome_variavel)),
include.rownames = FALSE)
cat("\n\n")
}
geraTabelaLatex(`Natureza`, "Natureza")
geraTabelaLatex(`Meio Empregado`, "Meio Empregado")
geraTabelaLatex(`Gênero`, "Gênero")
geraTabelaLatex(`Escolaridade da Vítima`, "Escolaridade da Vítima")
geraTabelaLatex(`Raça da Vítima`, "Raça da Vítima")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
# Função para gerar somente o ambiente tabular em LaTeX
geraTabelaLatex <- function(variavel, nome_variavel) {
# Cria a tabela de frequência simples
freq <- table(variavel)
# Calcula as frequências relativas (em porcentagem)
rel <- round(prop.table(freq) * 100, 2)
# Cria um data frame com as categorias, frequências e frequências relativas
df <- data.frame(
Categoria = names(freq),
Frequencia = as.numeric(freq),
Frequencia_Relativa = as.numeric(rel)
)
# Gera e imprime apenas o ambiente tabular (sem table e caption)
print(xtable(df, caption = paste("Frequências para", nome_variavel)),
include.rownames = FALSE,
floating = FALSE)
cat("\n\n")
}
geraTabelaLatex(`Natureza`, "Natureza")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
# Função para gerar apenas o ambiente 'tabular' com a formatação compatível com o modelo do Overleaf
geraTabelaLatex <- function(variavel, nome_variavel) {
# Cria a tabela de frequência simples e relativa
freq <- table(variavel)
rel <- round(prop.table(freq) * 100, 2)
# Data frame com os dados para a tabela
df <- data.frame(
Categoria = names(freq),
Frequência = as.numeric(freq),
`Frequência Relativa (\%)` = as.numeric(rel)
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
geraTabelaLatex(`Natureza`, "Natureza")
geraTabelaLatex(`Meio Empregado`, "Meio Empregado")
View(geraTabelaLatex)
geraTabelaLatex(`Meio Empregado`, "Meio Empregado")
geraTabelaLatex(`Gênero`, "Gênero")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
geraTabelaRStudio <- function(variavel, nome_variavel) {
# Cria a tabela de frequência simples e relativa
freq <- table(variavel)
rel <- round(prop.table(freq) * 100, 2)
# Data frame com os dados formatados
df <- data.frame(
Categoria = names(freq),
Frequência = as.numeric(freq),
`Frequência Relativa (%)` = as.numeric(rel)
)
# Exibe a tabela no console formatada com kable()
cat("\n", nome_variavel, "\n")
print(kable(df, format = "pipe", align = c("l", "r", "r")))
}
# Chamar para cada variável
geraTabelaRStudio(data$Natureza, "Natureza")
library(knitr)
library(knitr)
geraTabelaRStudio <- function(variavel, nome_variavel) {
# Cria a tabela de frequência simples e relativa
freq <- table(variavel)
rel <- round(prop.table(freq) * 100, 2)
# Data frame com os dados formatados
df <- data.frame(
Categoria = names(freq),
Frequência = as.numeric(freq),
`Frequência Relativa (%)` = as.numeric(rel)
)
# Exibe a tabela no console formatada com kable()
cat("\n", nome_variavel, "\n")
print(kable(df, format = "pipe", align = c("l", "r", "r")))
}
# Chamar para cada variável
geraTabelaRStudio(data$Natureza, "Natureza")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
View(geraCSV)
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
# Criar CSVs para cada variável
geraTabela(data$Natureza, "tabela_natureza")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
df <- data.frame(
Categoria = names(freq),
Frequência = as.numeric(freq),
`Frequência Relativa` = as.numeric(rel)
)
# Criar CSVs para cada variável
geraTabela(data$Natureza, "tabela_natureza")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
clear
# Criar CSVs para cada variável
geraTabela(data$Natureza, "tabela_natureza")
geraTabela(data$`Meio Empregado`, "tabela_meio_empregado")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
geraTabela(data$`Meio Empregado`, "tabela_meio_empregado")
geraTabela(data$`Escolaridade da Vítima`, "tabela_escolaridade")
geraTabela(data$`Raça da Vítima`, "tabela_raca")
geraTabela(data$`Dia da Semana`, "tabela_dia_semana")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
geraTabelaCruzada(data$`Meio Empregado`, data$Gênero, "tabela_meio_vs_genero")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
geraTabelaCruzada(data$`Meio Empregado`, data$Gênero, "tabela_meio_vs_genero")
geraTabelaCruzada(data$`Escolaridade da Vítima`, data$`Raça da Vítima`, "tabela_escolaridade_vs_raca")
geraTabelaCruzada(data$`Escolaridade da Vítima`, data$`Raça da Vítima`, "tabela_escolaridade_vs_raca")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
geraTabelaCruzada <- function(var1, var2) {
# Carregar pacotes necessários
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("kableExtra", quietly = TRUE)) install.packages("kableExtra")
library(tidyverse)
library(kableExtra)
# Criar tabela de frequência e frequência relativa
tabela_freq <- table(var1, var2)
tabela_relativa <- round(prop.table(tabela_freq, margin = NULL) * 100, 2)
# Converter para data frame e combinar
df_freq <- as.data.frame(tabela_freq) %>% rename(Frequência = Freq)
df_rel <- as.data.frame(tabela_relativa) %>% rename(`Frequência Relativa (%)` = Freq)
df_final <- merge(df_freq, df_rel, by = c("var1", "var2")) %>%
pivot_wider(
names_from = var2,
values_from = c(Frequência, `Frequência Relativa (%)`),
names_glue = "{var2}_{.value}"
)
# Renomear colunas para clareza
colnames(df_final)[1] <- "Escolaridade"
# Exibir tabela formatada
tabela_formatada <- df_final %>%
kable("html", align = c("l", rep("c", ncol(df_final)-1))) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
) %>%
add_header_above(
c(" " = 1, rep(c("Ocorrências", "Freq. Relativa (%)"), length(unique(var2))))
)
print(tabela_formatada)
}
geraTabelaCruzada(data$`Escolaridade da Vítima`, data$`Raça da Vítima`)
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
geraTabelaCruzada <- function(var1, var2) {
# Carregar pacotes necessários
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("kableExtra", quietly = TRUE)) install.packages("kableExtra")
library(tidyverse)
library(kableExtra)
# Criar tabela de frequência e frequência relativa
tabela_freq <- table(var1, var2)
tabela_relativa <- round(prop.table(tabela_freq, margin = NULL) * 100, 2)
# Converter para data frame e combinar
df_freq <- as.data.frame(tabela_freq) %>%
rename(Frequência = Freq)
df_rel <- as.data.frame(tabela_relativa) %>%
rename(`Frequência Relativa (%)` = Freq)
df_final <- merge(df_freq, df_rel, by = c("var1", "var2")) %>%
mutate(
`Combinação` = paste0(Frequência, " (", `Frequência Relativa (%)`, "%)") # Juntar as colunas
) %>%
select(-Frequência, -`Frequência Relativa (%)`) %>% # Remover colunas antigas
pivot_wider(
names_from = var2,
values_from = Combinação,
names_glue = "{var2}"
)
# Renomear colunas
colnames(df_final)[1] <- "Escolaridade"
# Exibir tabela formatada
tabela_formatada <- df_final %>%
kable("html", align = c("l", rep("c", ncol(df_final)-1))) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
) %>%
add_header_above(c(" " = 1, "Amarela" = 1, "Branca" = 1, "Indígena" = 1, "Não Informada" = 1, "Parda" = 1, "Preta" = 1))
print(tabela_formatada)
}
geraTabelaCruzada(data$`Escolaridade da Vítima`, data$`Raça da Vítima`)
geraTabelaCruzada <- function(var1, var2) {
# Carregar pacotes necessários
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("kableExtra", quietly = TRUE)) install.packages("kableExtra")
library(tidyverse)
library(kableExtra)
# Criar tabela de frequência e frequência relativa
tabela_freq <- table(var1, var2)
tabela_relativa <- round(prop.table(tabela_freq, margin = NULL) * 100, 2)
# Converter para data frame e combinar
df_final <-
as.data.frame(tabela_freq) %>%
rename(Ocorrências = Freq) %>%
left_join(
as.data.frame(tabela_relativa) %>% rename(`Frequência Relativa (%)` = Freq),
by = c("var1", "var2")
) %>%
pivot_wider(
names_from = var2,
values_from = c(Ocorrências, `Frequência Relativa (%)`),
names_glue = "{var2}_{.value}"
)
# Renomear colunas para clareza
colnames(df_final)[1] <- "Escolaridade"
# Exibir tabela formatada
tabela_formatada <- df_final %>%
kable("html", align = c("l", rep("c", ncol(df_final)-1))) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
) %>%
add_header_above(
c(" " = 1, rep(c("Ocorrências", "Freq. Relativa (%)"), length(unique(var2))))
)
print(tabela_formatada)
}
geraTabelaCruzada(data$`Escolaridade da Vítima`, data$`Raça da Vítima`)
geraTabelaCruzada <- function(var1, var2, nome_var1 = "Variável 1", nome_var2 = "Variável 2") {
# Carregar pacotes necessários
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("kableExtra", quietly = TRUE)) install.packages("kableExtra")
library(tidyverse)
library(kableExtra)
# Criar tabelas de frequência e frequência relativa
tabela_freq <- table(var1, var2)
tabela_relativa <- round(prop.table(tabela_freq, margin = NULL) * 100, 2)
# Processar os dados
df_final <-
as.data.frame(tabela_freq) %>%
rename(Ocorrências = Freq) %>%
left_join(
as.data.frame(tabela_relativa) %>% rename(`Frequência Relativa (%)` = Freq),
by = c("var1", "var2")
) %>%
pivot_wider(
names_from = var2,
values_from = c(Ocorrências, `Frequência Relativa (%)`),
names_glue = "{var2}_{.value}",
names_vary = "slowest"
)
# Reordenar colunas dinamicamente
categorias_var2 <- levels(as.factor(var2))
colunas_ordenadas <- c("var1", paste0(rep(categorias_var2, each = 2), "_", c("Ocorrências", "Frequência Relativa (%)")))
df_final <- df_final[, colunas_ordenadas]
# Renomear colunas
colnames(df_final)[1] <- nome_var1
# Gerar cabeçalho agrupado
header <- c(" " = 1, rep(c("Ocorrências", "Freq. Relativa (%)"), length(categorias_var2)))
names(header) <- c(nome_var1, rep(categorias_var2, each = 2))
# Exibir tabela formatada
tabela_formatada <- df_final %>%
kable("html", align = c("l", rep("c", ncol(df_final)-1))) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
) %>%
add_header_above(header)
print(tabela_formatada)
}
geraTabelaCruzada(data$`Escolaridade da Vítima`, data$`Raça da Vítima`, Escolaridade, Raça)
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
geraTabelaCruzada <- function(var1, var2, nome_var1 = "Variável 1", nome_var2 = "Variável 2") {
# Carregar pacotes necessários
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("kableExtra", quietly = TRUE)) install.packages("kableExtra")
library(tidyverse)
library(kableExtra)
# Criar tabelas de frequência e frequência relativa
tabela_freq <- table(var1, var2)
tabela_relativa <- round(prop.table(tabela_freq, margin = NULL) * 100, 2)
# Processar os dados
df_final <-
as.data.frame(tabela_freq) %>%
rename(Ocorrências = Freq) %>%
left_join(
as.data.frame(tabela_relativa) %>% rename(`Frequência Relativa (%)` = Freq),
by = c("var1", "var2")
) %>%
pivot_wider(
names_from = var2,
values_from = c(Ocorrências, `Frequência Relativa (%)`),
names_glue = "{var2}_{.value}",
names_vary = "slowest"
)
# Reordenar colunas dinamicamente
categorias_var2 <- levels(as.factor(var2))
colunas_ordenadas <- c("var1", paste0(rep(categorias_var2, each = 2), "_", c("Ocorrências", "Frequência Relativa (%)")))
df_final <- df_final[, colunas_ordenadas]
# Renomear colunas
colnames(df_final)[1] <- nome_var1
# Gerar cabeçalho agrupado
header <- c(" " = 1, rep(c("Ocorrências", "Freq. Relativa (%)"), length(categorias_var2)))
names(header) <- c(nome_var1, rep(categorias_var2, each = 2))
# Exibir tabela formatada
tabela_formatada <- df_final %>%
kable("html", align = c("l", rep("c", ncol(df_final)-1))) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
) %>%
add_header_above(header)
print(tabela_formatada)
}
geraTabelaCruzada(data$`Escolaridade da Vítima`, data$`Raça da Vítima`, "Escolaridade", "Raça")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
geraTabelaCruzada(data$`Escolaridade da Vítima`, data$`Raça da Vítima`, "Escolaridade", "Raça")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
# Criar gráfico
ggplot(freq_genero, aes(x = "", y = Percentual, fill = Genero)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(Percentual, 1), "%")),
position = position_stack(vjust = 0.5)) +
labs(title = "Distribuição por Gênero", fill = "Gênero") +
theme_void() +
scale_fill_manual(values = c("#FF6B6B", "#4ECDC4"))
# Criar gráfico
ggplot(freq_genero, aes(x = "", y = Percentual, fill = Genero)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(Percentual, 1), "%")),
position = position_stack(vjust = 0.5)) +
labs(fill = "Gênero") +
theme_void() +
scale_fill_manual(values = c("#FF6B6B", "#4ECDC4"))
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
# Uso da função (exemplos)
geraGraficoSetor(data$Gênero,
"Distribuição por Gênero",
"g_pie_genero.png",
largura = 5,
altura = 5)
rlang::last_trace()
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
tab_natureza
tab_meio_vs_genero
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
# Função para gerar gráficos de setor (pizza) automáticos
geraGraficoSetor <- function(variavel, titulo, nome_arquivo, largura = 6, altura = 6) {
# Carregar pacotes
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
library(ggplot2)
library(dplyr)
# Calcular frequências usando a mesma lógica da geraTabela
freq <- table(variavel) %>%
as.data.frame() %>%
mutate(Percentual = round(Frequência / sum(Frequência) * 100, 2))
# Criar gráfico
grafico <- ggplot(freq, aes(x = "", y = Percentual, fill = Categoria)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
geom_text(
aes(label = paste0(Percentual, "%")),
position = position_stack(vjust = 0.5),
size = 5
) +
labs(title = titulo, fill = "Categorias") +
theme_void() +
theme(
legend.position = "bottom",
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5)
)
# Salvar gráfico
ggsave(nome_arquivo, plot = grafico, width = largura, height = altura, dpi = 300)
}
# Uso da função (exemplos)
geraGraficoSetor(data$Gênero,
"Distribuição por Gênero",
"g_pie_genero.png",
largura = 5,
altura = 5)
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
source("C:/Users/Caio/unifor/2025.1/met-quant-computacao/trabalho-av1/dados-av1.R")
